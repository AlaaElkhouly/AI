def check_win(board, piece):
    # Horizontal, vertical, diagonal checks
    for row in range(ROWS):
        for col in range(COLS - 3):
            if all(board[row, col + i] == piece for i in range(4)):
                return True

    for row in range(ROWS - 3):
        for col in range(COLS):
            if all(board[row + i, col] == piece for i in range(4)):
                return True

    for row in range(ROWS - 3):
        for col in range(COLS - 3):
            if all(board[row + i, col + i] == piece for i in range(4)):
                return True

    for row in range(3, ROWS):
        for col in range(COLS - 3):
            if all(board[row - i, col + i] == piece for i in range(4)):
                return True

    return False
----------------------------------------------------------------------------------
      def single_piece_heuristic(board, piece):
    """
    Evaluate single chessmen based on their position on the board.
    """
    position_values = [40, 70, 120, 200, 120, 70, 40]  # Column-wise values for single pieces
    score = 0
    for row in range(ROWS):
        for col in range(COLS):
            if board[row, col] == piece:
                score += position_values[col]
            elif board[row, col] == (PLAYER_PIECE if piece == AI_PIECE else AI_PIECE):
                score -= position_values[col]
    return score
      --------------------------------------------------------------------
      def evaluate_window_heuristic1(window, piece):
    """
    Evaluate a window of 4 cells for Heuristic-1 features.
    """
    score = 0
    opp_piece = PLAYER_PIECE if piece == AI_PIECE else AI_PIECE

    if np.count_nonzero(window == piece) == 4:
        return float('inf')  # Feature 1: Absolute win

    if np.count_nonzero(window == piece) == 3 and np.count_nonzero(window == EMPTY) == 1:
        score += 900000  # Feature 2: Three connected

    if np.count_nonzero(window == piece) == 2 and np.count_nonzero(window == EMPTY) == 2:
        score += 50000  # Feature 3: Two connected

    if np.count_nonzero(window == opp_piece) == 3 and np.count_nonzero(window == EMPTY) == 1:
        score -= 900000  # Block opponent's three connected

    return score
      ---------------------------------------------------------------------------
      def heuristic(board, piece):
    """
    Evaluate the board state based on Heuristic-1.
    """
    score = 0
    opp_piece = PLAYER_PIECE if piece == AI_PIECE else AI_PIECE

    # Feature 1: Absolute win
    if check_win(board, piece):
        return float('inf')  # AI wins
    if check_win(board, opp_piece):
        return float('-inf')  # Opponent wins

    # Horizontal scoring
    for row in range(ROWS):
        for col in range(COLS - 3):
            window = board[row, col:col + 4]
            score += evaluate_window_heuristic1(window, piece)

    # Vertical scoring
    for row in range(ROWS - 3):
        for col in range(COLS):
            window = board[row:row + 4, col]
            score += evaluate_window_heuristic1(window, piece)

    # Positive diagonal scoring
    for row in range(ROWS - 3):
        for col in range(COLS - 3):
            window = [board[row + i, col + i] for i in range(4)]
            score += evaluate_window_heuristic1(window, piece)

    # Negative diagonal scoring
    for row in range(3, ROWS):
        for col in range(COLS - 3):
            window = [board[row - i, col + i] for i in range(4)]
            score += evaluate_window_heuristic1(window, piece)

    # Feature 4: Single chessmen position evaluation
    score += single_piece_heuristic(board, piece)

    return score
